컴퓨터를 모르는 사람에게 친숙하지만은 않은 친구 Git (깃) 이란?
- 
일상 생활과 컴퓨팅이 익숙해진, 오늘 컴퓨터에 크게 관심이 없는 사람도 흘러가듯 Git (갓), Github (깃허브)라는 이름은 들어보게 된다. 하지만, 정말 그냥 흘러가는 경우가 대다수다. 

나는 깃을 처음 얘기할때 _'세이브 포인트'_ 라고 이해를 했다 (강사님은 특정 위치를 지정한 깃발이라는 이름으로 표현을 해주셨다). 우리는 하루하루 지내면서 뭔가가 계속 변화하는걸 확인하게 된다. 근데 이 변화의 방향이 늘 긍정적이기만 한 건 아니다. 그런때 우리는 생각한다 '아 하루만 돌아가면 좋겠다' '며칠만 돌아가면 좋겠다.' 그런 생각이 게임에서는 통용된다. 그리고 코딩에서 이런 세이브 포인트를 저장소 안에 만들어두는 기능이 git이다.

앞으로의 목표는 이와 같이 SSAFY에서 배운 내용을 개인적으로 정리해서 이후에도 필요할 때마다 확인하고 더 나아가서는 나와 같이 그 개념을 모르는 사람들도 천천히 따라올 수 있도록 내가 이해한 방식을 공유하고자 한다.

Git의 3 단계
-
Git은 총 세 개의 공간으로 구성이 된다고 이해를 할 수 있다.
* Working Directory (작업공간)
* Staging Area (스테이징 영역)
* Repository (저장소/레포)

이때 각각은 어떤 공간이고 왜 필요한 걸까?

Working Directory:

우리가 파일을 직접 변경하는 공간으로 텍스트, 이미지, 코드 등등 다양한 요소를 변경하는 영역이라고 생각을 할 수 있다. Working (작업하는) Directory 라는 이름처럼 우리의 작업 공간이자 변화가 만들어지는 공간이라고 생각을 하면 될 것 같다.

Staging Area:

영어로 뜻을 찾아보니 Staging Area는 '부대 집합지' 혹은 숙어로 '중요한 준비단계'를 지칭한다고 한다. 모두 굉장히 타당한 의미이지만, 내 머릿속에 먼저 생각나는 비유는 "Backstage" 라는 용어이다. 우리에게 보여지는 화려한 무대 (Stage) 뒤에는 배우와 소품 등 모든 준비물이 집합하는 백스테이지가 있다, 이를 고려하면 add를 통해서 보낸 정보가 대기하는 이 영역에 staging이라는 표현은 굉장히 적합하다고 느껴진다.

Repository:

저장소는 마지막으로 기존에 보내놓은 기록들을 저장하는 저장소다. 이 곳에 들어간 정보를 기반으로 사용자는 원하는 시점을 기록으로 남기고 push와 pull을 사용할 수 있다.

이를 통하여 로컬에 한정된 버전 관리(내가 현재 작업을 하고 있는 컴퓨터 내부에 버전 정보를 기록)를 원격 버전 관리 시스템으로 보내 다른 컴퓨터에서 이어서 작업을 할 수 있다.

git과 github의 개념을 도표로 남겨보았다
![git_concept](git_concept.png)


Git의 단축키
-
하지만 이런 편리한 Git도 결국은 내가 원하는 기능을 불러오고 명령해줘야만 사용할 수 있다. 결국 코딩에서는 안타깝게도 우리에게 직관적으로 사용할 수 있게 해주는 저장하기 불러오기 *'딸깍'* 버튼이 존재하지 않는다. 열심히 *'이겨야만 한다'* 를 외치며 키보드를 두들기자...

*Git(Local)*

**`git init`** : 특정 폴더의 초기화 및 Git에서의 추적 상태를 명령한다, 이 이후로는 해당 디렉토리 내부에서 일어나는 모든 편화가 트래킹(추적) 되기 시작한다.

**`git add` (staging area에 추가를 원하는 디렉토리/파일명)** : 해당 디렉토리/파일을 내가 작업을 하고 변경을 하는 Working Area에서 Staging Area로 이동시키겠다는 의미이다.

* 이때 디렉토리명 혹은 파일명 없이 . 을 쳐주게 되면 스테이징 에리어에 올라와있지 않은 모든 파일/디렉토리를 모두 포함하게 된다

**`git commit -m` "commit에 기록될 이름"** : 이미 스테이징 에리어에 올라가 있는 디렉토리/파일을 마지막으로 저장소 (Repository)로 전송하겠다는 의미이다

**`git status`** : 현재 Working Area에 있는 파일의 상태등을 확인할 수 있는 명령어. 파일등이 트래킹 되고 있는지 저장소로 보내야 할 변화가 있는지 등등.


*Git(Remote)*

**git push** : 로컬 저장소에 보내 놓은 파일과 디렉토리 등을 원격 저장소로 보내주는 역할을 하고 있다.

**git pull** : 

**git clone** :

**git log** :